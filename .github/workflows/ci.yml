name: CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          check-latest: true

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get dependencies
        run: go mod download

      - name: Run tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
          go tool cover -func=coverage.txt

      - name: Build
        run: go build -v ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build binaries
        run: |
          GOOS=linux GOARCH=amd64 go build -o ginit-linux-amd64
          GOOS=darwin GOARCH=amd64 go build -o ginit-darwin-amd64
          GOOS=darwin GOARCH=arm64 go build -o ginit-darwin-arm64
          GOOS=windows GOARCH=amd64 go build -o ginit-windows-amd64.exe

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ginit-linux-amd64
          asset_name: ginit-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload Release Assets (Darwin AMD64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ginit-darwin-amd64
          asset_name: ginit-darwin-amd64
          asset_content_type: application/octet-stream

      - name: Upload Release Assets (Darwin ARM64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ginit-darwin-arm64
          asset_name: ginit-darwin-arm64
          asset_content_type: application/octet-stream

      - name: Upload Release Assets (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ginit-windows-amd64.exe
          asset_name: ginit-windows-amd64.exe
          asset_content_type: application/octet-stream

      - name: Check for license headers
        run: |
          if [ -f "scripts/check-license.sh" ]; then
            chmod +x scripts/check-license.sh
            ./scripts/check-license.sh
          fi 